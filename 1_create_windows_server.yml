- name: Provision EC2 Instance with Key Properties
  hosts: localhost
  gather_facts: false
  vars:
    instance_name: my-windows-ad-ansible-ec2
    ami_id: ami-0de75ee1d458b125a    # Substitute with your AMI ID
    instance_type: t3.micro
    key_name: aap-key             # Replace with your AWS key pair name (not a .pem file)
    aws_region: ap-southeast-1
    vpc_id: vpc-08198b8263a9c5d81
    subnet_id: subnet-0853f1cb2060bd666
    security_group_ids: sg-04ce5d3ea3832de53
    assign_public_ip: true
    root_volume:
      device_name: /dev/xvda
      ebs:
        volume_size: 20             # in GB - adjust as needed
        volume_type: gp3            # or gp2, io1, etc.
        delete_on_termination: true
    windows_user_data: |
      <powershell>
      ### Allow ALL inbound traffic
      New-NetFirewallRule -DisplayName "Allow All Inbound" -Direction Inbound -Action Allow -Protocol Any

      ### Allow ALL outbound traffic
      New-NetFirewallRule -DisplayName "Allow All Outbound" -Direction Outbound -Action Allow -Protocol Any

      ### Disables the Windows Defender Firewall for all three profiles: Domain, Public, and Private
      Set-NetFirewallProfile -Profile Domain,Public,Private -Enabled False

      ### Quickly configures Windows Remote Management (WinRM) on the system.
      winrm quickconfig -q

      ### Configures WinRM to accept unencrypted connections.
      winrm set winrm/config/service '@{AllowUnencrypted="true"}'

      ### Enables Basic Authentication for WinRM.
      winrm set winrm/config/service/auth '@{Basic="true"}'

      ### Sets the active network profiles (wired/Wi-Fi adapters) on the server to "Private" rather than Public. (less resrictive)
      Set-NetConnectionProfile -NetworkCategory Private

      </powershell>

  tasks:
    - name: Launch EC2 instance
      amazon.aws.ec2_instance:
        name: "{{ instance_name }}"
        image_id: "{{ ami_id }}"
        instance_type: "{{ instance_type }}"
        key_name: "{{ key_name }}"
        region: "{{ aws_region }}"
        vpc_subnet_id: "{{ subnet_id }}"
        security_group: "{{ security_group_ids }}"
        network:
          assign_public_ip: "{{ assign_public_ip }}"
        volumes:
          - "{{ root_volume }}"
        wait: true
        user_data: "{{ windows_user_data }}"
      register: ec2_result

    - name: Display instance details
      ansible.builtin.debug:
        msg:
          - "Instance ID: {{ ec2_result.instances[0].instance_id }}"
          - "Public IP: {{ ec2_result.instances[0].public_ip_address }}"
          - "Private DNS Name: {{ ec2_result.instances[0].private_dns_name }}"
          - "AMI: {{ ami_id }}"
          - "Type: {{ instance_type }}"

    - name: Write instance connection details to YAML file
      ansible.builtin.copy:
        content: |
          key_name: "{{ key_name }}"
          public_ip: "{{ ec2_result.instances[0].public_ip_address }}"
        dest: provisioned_instance_output.yml     ### OUTPUT

    - name: Ensure host entry present in /etc/hosts
      become: true
      ansible.builtin.lineinfile:
        path: /etc/hosts
        line: "{{ ec2_result.instances[0].public_ip_address }} {{ ec2_result.instances[0].private_dns_name }}"
        state: present
        create: yes

    - name: Show entry to /etc/hosts
      ansible.builtin.debug:
        msg: "{{ ec2_result.instances[0].public_ip_address }} {{ ec2_result.instances[0].private_dns_name }}"